/* 13.07.2023
Домашнее задание 5. 
№1 

Quick sort пишем еще раз “с чистого листа”
Выбираем опорный элемент из массива. Как правило, это средний элемент.
Делим массив на 2 подмассива. Элементы, которые меньше опорного, и элементы, которые больше   опорного.
Рекурсивно применяем сортировку к обоим подмассивам.
В результате массивы будут делиться до тех пор, пока не останется один элемент, который потом отсортируется.

№2*
Реализовать Quick sort используя итерационный подход.


*/


public class QuickSort {

    // Рекурсивный подход
    public static void quickSortRecursive(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSortRecursive(arr, low, pivotIndex - 1);
            quickSortRecursive(arr, pivotIndex + 1, high);
        }
    }

    // Итеративный подход
    public static void quickSortIterative(int[] arr, int low, int high) {
        int[] stack = new int[high - low + 1];
        int top = -1;

        stack[++top] = low;
        stack[++top] = high;

        while (top >= 0) {
            high = stack[top--];
            low = stack[top--];

            int pivotIndex = partition(arr, low, high);

            if (pivotIndex - 1 > low) {
                stack[++top] = low;
                stack[++top] = pivotIndex - 1;
            }

            if (pivotIndex + 1 < high) {
                stack[++top] = pivotIndex + 1;
                stack[++top] = high;
            }
        }
    }

    // Метод для определения опорного элемента и разделения массива
    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                swap(arr, i, j);
            }
        }

        swap(arr, i + 1, high);
        return i + 1;
    }

    // Метод для обмена элементов в массиве
    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // Метод для вывода массива на экран
    public static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {12, 4, 5, 6, 7, 3, 1, 15, 2, 8};
        int n = arr.length;

        System.out.println("Исходный массив:");
        printArray(arr);

        // Вызываем рекурсивный вариант QuickSort
        quickSortRecursive(arr, 0, n - 1);

        System.out.println("\nОтсортированный массив (рекурсивный вариант):");
        printArray(arr);

        // Восстанавливаем исходный массив
        arr = new int[]{12, 4, 5, 6, 7, 3, 1, 15, 2, 8};

        // Вызываем итеративный вариант QuickSort
        quickSortIterative(arr, 0, n - 1);

        System.out.println("\nОтсортированный массив (итеративный вариант):");
        printArray(arr);
    }
}